// Generated by CoffeeScript 1.12.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['components/form/templates', 'views/_base'], function(Templates, AppView) {
    var FormWrapper;
    return FormWrapper = (function(superClass) {
      extend(FormWrapper, superClass);

      function FormWrapper() {
        return FormWrapper.__super__.constructor.apply(this, arguments);
      }

      FormWrapper.prototype.template = _.template(Templates.form);

      FormWrapper.prototype.tagName = "form";

      FormWrapper.prototype.className = "well clearfix";

      FormWrapper.prototype.attributes = function() {
        return {
          "data-type": this.getFormDataType()
        };
      };

      FormWrapper.prototype.regions = {
        formContentRegion: "#form-content-region"
      };

      FormWrapper.prototype.ui = {
        buttonContainer: "ul.inline"
      };

      FormWrapper.prototype.triggers = {
        "submit": "form:submit",
        "click [data-form-button='cancel']": "form:cancel"
      };

      FormWrapper.prototype.modelEvents = {
        "change:_errors": "changeErrors",
        "sync:start": "syncStart",
        "sync:stop": "syncStop"
      };

      FormWrapper.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }
        return this.config = options.config, this.buttons = options.buttons, options;
      };

      FormWrapper.prototype.serializeData = function() {
        var ref, ref1;
        return {
          footer: this.config.footer,
          buttons: (ref = (ref1 = this.buttons) != null ? ref1.toJSON() : void 0) != null ? ref : false
        };
      };

      FormWrapper.prototype.onShow = function() {
        return _.defer((function(_this) {
          return function() {
            if (_this.config.focusFirstInput) {
              _this.focusFirstInput();
            }
            if (_this.buttons) {
              return _this.buttonPlacement();
            }
          };
        })(this));
      };

      FormWrapper.prototype.buttonPlacement = function() {
        return this.ui.buttonContainer.addClass("pull-" + this.buttons.placement);
      };

      FormWrapper.prototype.focusFirstInput = function() {
        return this.$(":input:visible:enabled:first").focus();
      };

      FormWrapper.prototype.getFormDataType = function() {
        if (this.model.isNew()) {
          return "new";
        } else {
          return "edit";
        }
      };

      FormWrapper.prototype.changeErrors = function(model, errors, options) {
        if (this.config.errors) {
          if (_.isEmpty(errors)) {
            return this.removeErrors();
          } else {
            return this.addErrors(errors);
          }
        }
      };

      FormWrapper.prototype.removeErrors = function() {
        return this.$(".error").removeClass("error").find("small").remove();
      };

      FormWrapper.prototype.addErrors = function(errors) {
        var array, name, results;
        if (errors == null) {
          errors = {};
        }
        results = [];
        for (name in errors) {
          array = errors[name];
          results.push(this.addError(name, array[0]));
        }
        return results;
      };

      FormWrapper.prototype.addError = function(name, error) {
        var el, sm;
        el = this.$("[name='" + name + "']");
        sm = $("<small>").text(error);
        return el.after(sm).closest(".row").addClass("error");
      };

      FormWrapper.prototype.syncStart = function(model) {
        console.log("syncStart");
        if (this.config.syncing) {
          return this.addOpacityWrapper();
        }
      };

      FormWrapper.prototype.syncStop = function(model) {
        console.log("syncStop");
        if (this.config.syncing) {
          return this.addOpacityWrapper(false);
        }
      };

      return FormWrapper;

    })(AppView.Layout);
  });

}).call(this);

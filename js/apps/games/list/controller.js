// Generated by CoffeeScript 1.12.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["msgbus", "apps/games/list/views", "controller/_base", "entities/twitchtv"], function(msgBus, Views, AppController) {
    var Controller, appChannel;
    appChannel = msgBus.appChannel;
    return Controller = (function(superClass) {
      extend(Controller, superClass);

      function Controller() {
        return Controller.__super__.constructor.apply(this, arguments);
      }

      Controller.prototype.initialize = function(options) {
        var data;
        if (options == null) {
          options = {};
        }
        this.entities = appChannel.request("games:top:entities");
        console.log(this.entities);
        data = {
          collection: this.entities
        };
        this.layout = this.getLayoutView(data);
        this.listenTo(this.layout, "show:bubble", (function(_this) {
          return function() {
            return _this.gameBubbleRegion(_this.entities);
          };
        })(this));
        return this.show(this.layout, {
          loading: {
            entities: this.entities
          }
        });
      };

      Controller.prototype.gameRegion = function() {
        var view;
        view = this.getGameView(this.entities);
        this.listenTo(view, "childview:game:item:clicked", function(child, args) {
          return appChannel.trigger("app:game:detail", args.model);
        });
        this.listenTo(view, "scroll:more", function() {
          return appChannel.request("games:fetchmore");
        });
        return this.layout.getRegion("topGameList").show(view);
      };

      Controller.prototype.gameBubbleRegion = function(collection) {
        var view;
        view = this.getBubbleView(this.entities);
        return this.layout.getRegion("topGameList").show(view);
      };

      Controller.prototype.getBubbleView = function(collection) {
        return new Views.GamesBubbleView({
          collection: collection
        });
      };

      Controller.prototype.getLayoutView = function(options) {
        if (options == null) {
          options = {};
        }
        return new Views.Layout(options);
      };

      return Controller;

    })(AppController);
  });

}).call(this);

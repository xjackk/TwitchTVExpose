// Generated by CoffeeScript 1.12.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["msgbus", "apps/games/list/views", "controller/_base", "entities/twitchtv"], function(msgBus, Views, AppController) {
    var Controller, appChannel;
    appChannel = msgBus.appChannel;
    return Controller = (function(superClass) {
      extend(Controller, superClass);

      function Controller() {
        return Controller.__super__.constructor.apply(this, arguments);
      }

      Controller.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }
        this.entities = appChannel.request("games:top:entities");
        this.layout = this.getLayoutView({
          collection: this.entities
        });
        this.listenTo(this.layout, "show:grid", (function(_this) {
          return function() {
            return _this.showGridView(_this.entities);
          };
        })(this));
        this.listenTo(this.layout, "show:bubble", (function(_this) {
          return function() {
            return _this.showBubbleView(_this.entities);
          };
        })(this));
        this.listenTo(this.layout, "scroll:more", function() {
          return appChannel.request("games:fetchmore");
        });
        return this.show(this.layout, {
          loading: {
            entities: this.entities
          }
        });
      };

      Controller.prototype.showGridView = function(games) {
        var gView;
        gView = this.getGridView(games);
        return this.layout.getRegion("topGameList").show(gView);
      };

      Controller.prototype.showBubbleView = function(collection) {
        var bView;
        bView = this.getBubbleView(this.entities);
        return this.layout.getRegion("topGameList").show(bView);
      };

      Controller.prototype.getBubbleView = function(collection) {
        return new Views.GamesBubbleView({
          collection: collection
        });
      };

      Controller.prototype.getGridView = function(collection) {
        return new Views.GameGridView({
          collection: collection
        });
      };

      Controller.prototype.getLayoutView = function(options) {
        if (options == null) {
          options = {};
        }
        return new Views.Layout(options);
      };

      return Controller;

    })(AppController);
  });

}).call(this);

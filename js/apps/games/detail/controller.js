// Generated by CoffeeScript 1.12.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["msgbus", "apps/games/detail/views", "controller/_base"], function(msgBus, Views, AppController) {
    var Controller, appChannel;
    appChannel = msgBus.appChannel;
    return Controller = (function(superClass) {
      extend(Controller, superClass);

      function Controller() {
        return Controller.__super__.constructor.apply(this, arguments);
      }

      Controller.prototype.initialize = function(options) {
        var data, gameModel;
        if (options == null) {
          options = {};
        }
        this.gameName = options.gameName, gameModel = options.gameModel;
        if (gameModel === void 0) {
          gameModel = appChannel.request("games:searchName", this.gameName);
        }
        data = {
          gameModel: gameModel
        };
        this.mergeOptions(options, data);
        this.layout = this.getLayoutView(options);
        this.listenTo(this.layout, "render", (function(_this) {
          return function() {
            console.log("controller listen render:", _this.gameName);
            return _this.showStreams(_this.gameName);
          };
        })(this));
        return this.show(this.layout, {
          loading: {
            entities: gameModel
          }
        });
      };

      Controller.prototype.showStreams = function(name) {
        console.log("Name:", name);
        return appChannel.trigger("app:streams:list", this.layout.getRegion('streamRegion'), name);
      };

      Controller.prototype.getLayoutView = function(options) {
        return new Views.Layout(options);
      };

      return Controller;

    })(AppController);
  });

}).call(this);

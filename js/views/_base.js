// Generated by CoffeeScript 1.12.1
(function() {
  var slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["backbone", "marionette"], function(Marionette) {
    var AppCollectionView, AppCompositeView, AppItemView, AppLayout, _remove;
    _remove = Marionette.View.prototype.remove;
    _.extend(Marionette.View.prototype, {
      addOpacityWrapper: function(init) {
        if (init == null) {
          init = true;
        }
        return this.$el.toggleWrapper({
          className: "opacity"
        }, init);
      },
      remove: function() {
        var args, ref, wrapper;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if ((ref = this.model) != null ? typeof ref.isDestroyed === "function" ? ref.isDestroyed() : void 0 : void 0) {
          wrapper = this.$el.toggleWrapper({
            className: "opacity",
            backgroundColor: "red"
          });
          wrapper.fadeOut(400, function() {
            return $(this).remove();
          });
          return this.$el.fadeOut(400, (function(_this) {
            return function() {
              return _remove.apply(_this, args);
            };
          })(this));
        } else {
          return _remove.apply(this, args);
        }
      },
      templateHelpers: function() {
        return {
          linkTo: function(name, url, options) {
            if (options == null) {
              options = {};
            }
            _.defaults(options, {
              external: false
            });
            if (!options.external) {
              url = "#" + url;
            }
            return "<a href='" + url + "'>" + (this.escape(name)) + "</a>";
          }
        };
      }
    });
    return {
      ItemView: AppItemView = (function(superClass) {
        extend(AppItemView, superClass);

        function AppItemView() {
          return AppItemView.__super__.constructor.apply(this, arguments);
        }

        return AppItemView;

      })(Marionette.ItemView),
      CollectionView: AppCollectionView = (function(superClass) {
        extend(AppCollectionView, superClass);

        function AppCollectionView() {
          return AppCollectionView.__super__.constructor.apply(this, arguments);
        }

        return AppCollectionView;

      })(Marionette.CollectionView),
      CompositeView: AppCompositeView = (function(superClass) {
        extend(AppCompositeView, superClass);

        function AppCompositeView() {
          return AppCompositeView.__super__.constructor.apply(this, arguments);
        }

        return AppCompositeView;

      })(Marionette.CompositeView),
      Layout: AppLayout = (function(superClass) {
        extend(AppLayout, superClass);

        function AppLayout() {
          return AppLayout.__super__.constructor.apply(this, arguments);
        }

        return AppLayout;

      })(Marionette.Layout)
    };
  });

}).call(this);

// Generated by CoffeeScript 1.12.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['marionette', 'msgbus', 'apps/games/detail/templates', 'slimscroll'], function(Mn, msgBus, Templates) {
    var GameDetail, GamesLayout, StreamItem, StreamListView, appChannel;
    appChannel = msgBus.appChannel;
    StreamItem = (function(superClass) {
      extend(StreamItem, superClass);

      function StreamItem() {
        return StreamItem.__super__.constructor.apply(this, arguments);
      }

      StreamItem.prototype.template = _.template(Templates.streamitem);

      StreamItem.prototype.tagName = "li";

      StreamItem.prototype.className = "col-md-6 col-xs-12 streamitem";

      StreamItem.prototype.triggers = {
        "click": "stream:item:clicked"
      };

      return StreamItem;

    })(Mn.View);
    StreamListView = (function(superClass) {
      extend(StreamListView, superClass);

      function StreamListView() {
        this.checkScroll = bind(this.checkScroll, this);
        return StreamListView.__super__.constructor.apply(this, arguments);
      }

      StreamListView.prototype.childView = StreamItem;

      StreamListView.prototype.tagName = "ul";

      StreamListView.prototype.className = "list-inline scrollable-inner";

      StreamListView.prototype.ui = {
        scroll: ".scrollable-inner"
      };

      StreamListView.prototype.events = {
        "scroll": "checkScroll"
      };

      StreamListView.prototype.checkScroll = function(e) {
        var margin, scrollTop, virtualHeight;
        console.log("scroll", e);
        virtualHeight = this.ui.scroll.height();
        margin = .07 * virtualHeight;
        scrollTop = this.ui.scrollContainer.scrollTop() + this.ui.scrollContainer.height();
        if ((scrollTop + margin) >= virtualHeight) {
          return this.trigger("scroll:more");
        }
      };

      StreamListView.prototype.onChildviewStreamItemClicked = function(cv) {
        return appChannel.trigger("app:playa:show", cv.model);
      };

      return StreamListView;

    })(Mn.CollectionView);
    GameDetail = (function(superClass) {
      extend(GameDetail, superClass);

      function GameDetail() {
        return GameDetail.__super__.constructor.apply(this, arguments);
      }

      GameDetail.prototype.template = _.template(Templates.gamedetail);

      GameDetail.prototype.className = "col-xs-12";

      return GameDetail;

    })(Mn.View);
    return {
      Layout: GamesLayout = (function(superClass) {
        extend(GamesLayout, superClass);

        function GamesLayout() {
          return GamesLayout.__super__.constructor.apply(this, arguments);
        }

        GamesLayout.prototype.template = _.template(Templates.layout);

        GamesLayout.prototype.regions = {
          gameRegion: "#game-region",
          streamRegion: {
            el: "ul",
            replaceElement: true
          }
        };

        GamesLayout.prototype.ui = {
          scrollPanel: ".scrollable-container"
        };

        GamesLayout.prototype.onDomRefresh = function() {
          return this.ui.scrollPanel.slimScroll({
            height: '800px',
            color: '#00f',
            railVisible: true,
            alwaysVisible: true
          }).bind('slimscroll', function(e, pos) {
            return appChannel.request("streams:fetchmore");
          });
        };

        GamesLayout.prototype.onRender = function() {
          this.showChildView("gameRegion", new GameDetail({
            model: this.getOption("gameModel")
          }));
          return this.showChildView("streamRegion", new StreamListView({
            collection: this.getOption("streams")
          }));
        };

        return GamesLayout;

      })(Mn.View)
    };
  });

}).call(this);

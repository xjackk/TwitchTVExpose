// Generated by CoffeeScript 1.12.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["backbone"], function(Backbone) {
    var _Collection, _Model;
    return {
      Model: _Model = (function(superClass) {
        extend(_Model, superClass);

        function _Model() {
          this.saveError = bind(this.saveError, this);
          this.saveSuccess = bind(this.saveSuccess, this);
          return _Model.__super__.constructor.apply(this, arguments);
        }

        _Model.prototype.destroy = function(options) {
          if (options == null) {
            options = {};
          }
          _.defaults(options, {
            wait: true
          });
          this.set({
            _destroy: true
          });
          return _Model.__super__.destroy.call(this, options);
        };

        _Model.prototype.isDestroyed = function() {
          return this.get("_destroy");
        };

        _Model.prototype.save = function(data, options) {
          var isNew;
          if (options == null) {
            options = {};
          }
          isNew = this.isNew();
          _.defaults(options, {
            wait: true,
            success: _.bind(this.saveSuccess, this, isNew, options.collection),
            error: _.bind(this.saveError, this)
          });
          this.unset("_errors");
          return _Model.__super__.save.call(this, data, options);
        };

        _Model.prototype.saveSuccess = function(isNew, collection) {
          if (isNew) {
            if (collection) {
              collection.add(this);
            }
            if (collection) {
              collection.trigger("model:created", this);
            }
            return this.trigger("created", this);
          } else {
            if (collection == null) {
              collection = this.collection;
            }
            if (collection) {
              collection.trigger("model:updated", this);
            }
            return this.trigger("updated", this);
          }
        };

        _Model.prototype.saveError = function(model, xhr, options) {
          var ref;
          if (!(xhr.status === 500 || xhr.status === 404 || xhr.status === 201)) {
            return this.set({
              _errors: (ref = $.parseJSON(xhr.responseText)) != null ? ref.errors : void 0
            });
          }
        };

        return _Model;

      })(Backbone.Model),
      Collection: _Collection = (function(superClass) {
        extend(_Collection, superClass);

        function _Collection() {
          return _Collection.__super__.constructor.apply(this, arguments);
        }

        return _Collection;

      })(Backbone.Collection)
    };
  });

}).call(this);
